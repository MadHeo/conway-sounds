{"version":3,"sources":["util/SoundPlayer.js","Cell.js","GameOfLife.js","serviceWorker.js","index.js"],"names":["audioContext","window","AudioContext","webkitAudioContext","Error","createAudioContext","Cell","cellClass","classNames","populated","this","props","cellStyle","width","height","frequency","duration","osType","oscillator","createOscillator","type","setValueAtTime","currentTime","gainNode","createGain","gain","connect","destination","start","setTimeout","stop","playSounds","num","soundType","react_default","a","createElement","Fragment","className","onClick","style","id","Component","defaultProps","GameOfLife","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","generation","started","worldSize","populatedCells","startingPopulation","map","cell","border","currentSound","currentIndex","changeSoundType","bind","assertThisInitialized","x","y","cellIndex","includes","left","right","Math","min","top","bottom","newPopulatedCells","currentCellIndex","numberOfPopulatedNeighbours","_this$getAdjacentCell","getAdjacentCellCoordinates","xOptions","yOptions","_i","length","nx","_i2","ny","currentCellPopulated","push","setState","prevProps","prevState","_this2","populatedCellsToProgress","gen","getPopulatedCellsAfter","cellIndexValue","filter","value","concat","toConsumableArray","_this3","cells","_loop","i","cellWidth","src_Cell","assign","key","toggleCell","display","toggleGame","Boolean","location","hostname","match","ReactDOM","render","src_GameOfLife_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0259bbf4.chunk.js","sourcesContent":["let audioContext = null;\n\nfunction createAudioContext() {\n  if (!window.AudioContext && !window.webkitAudioContext) {\n    throw new Error(\"not supported in this browser\");\n  }\n\n  if (!audioContext) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  }\n}\n\ncreateAudioContext();\n\nexport function playSounds(frequency, duration, osType) {\n  // OscillatorNode 생성 (기본 파형: sine)\n  const oscillator = audioContext.createOscillator();\n  oscillator.type = osType; // 파형의 타입: sine, square, sawtooth, triangle, custom\n  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime); // 주파수 설정\n\n  // GainNode 생성 (볼륨 조절)\n  const gainNode = audioContext.createGain();\n  gainNode.gain.setValueAtTime(0.01, audioContext.currentTime); // 초기 볼륨 설정\n\n  // 연결\n  oscillator.connect(gainNode);\n  gainNode.connect(audioContext.destination);\n\n  // 소리 재생 시작\n  oscillator.start();\n\n  // 소리 재생 중지\n  setTimeout(() => {\n    oscillator.stop();\n  }, duration);\n}\n","import React, { Component, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { timingSafeEqual } from \"crypto\";\nimport { playSounds } from \"./util/SoundPlayer.js\";\n\nclass Cell extends Component {\n  render() {\n    const cellClass = classNames({\n      Cell: true,\n      populated: this.props.populated,\n    });\n\n    const cellStyle = {\n      width: this.props.width,\n      height: this.props.height || this.props.width,\n    };\n\n    if (this.props.populated) {\n      playSounds(this.props.num * 2, 100, this.props.soundType);\n    }\n\n    return (\n      <>\n        <div\n          className={cellClass}\n          onClick={this.props.onClick}\n          style={cellStyle}\n          id={this.props.num}\n        />\n      </>\n    );\n  }\n}\n\nCell.propTypes = {\n  populated: PropTypes.bool,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number,\n};\n\nCell.defaultProps = {\n  populated: false,\n};\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"./Cell\";\n\nimport \"./GameOfLife.css\";\n\nclass GameOfLife extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: props.width,\n      height: props.height,\n      generation: props.generation,\n      started: props.start,\n      worldSize: props.width * props.height,\n      populatedCells: (props.startingPopulation || []).map((cell) => {\n        return cell[0] + cell[1] * props.width;\n      }),\n      border: this.props.border,\n    };\n    this.soundType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"];\n    this.currentSound = \"sine\";\n    this.currentIndex = 0;\n    this.changeSoundType = this.changeSoundType.bind(this);\n  }\n\n  cellIsPopulated(populatedCells, x, y) {\n    let cellIndex = x + y * this.state.width;\n    return populatedCells.includes(cellIndex);\n  }\n\n  getAdjacentCellCoordinates(x, y) {\n    let left = x - 1;\n    let right = x + 1;\n    if (this.state.border === \"marquee\") {\n      if (left < 0) {\n        left = this.state.width - 1;\n      }\n      if (right >= this.state.width) {\n        right = 0;\n      }\n    } else {\n      right = Math.min(this.state.width - 1, x + 1);\n    }\n\n    let top = y - 1;\n    let bottom = y + 1;\n    if (this.state.border === \"marquee\") {\n      if (bottom >= this.state.height) {\n        bottom = 0;\n      }\n      if (top < 0) {\n        top = this.state.height - 1;\n      }\n    } else {\n      bottom = Math.min(this.state.height - 1, y + 1);\n    }\n    return {\n      top,\n      right,\n      bottom,\n      left,\n    };\n  }\n\n  getPopulatedCellsAfter(populatedCells) {\n    let newPopulatedCells = [];\n    // TODO: Make this more efficient. The smallest\n    // number that it could possibly be be is the\n    // smallest in the pop. cells minus (width + 1)\n    // and the biggest is the biggest in pop. cells\n    // plus (width + 1). But need to take marquee borders\n    // into account. Could do a for (let x of candidates(populatedCells))\n    // to make a shortlist. Or could go through each populated cell,\n    // go through each neighbour, then add it to the \"checked it\"\n    // list - this is definitely more efficient\n    for (let x = 0; x < this.state.width; x++) {\n      for (let y = 0; y < this.state.height; y++) {\n        const currentCellIndex = x + y * this.state.width;\n        let numberOfPopulatedNeighbours = 0;\n        // let cellRight = x + 1 >= this.state.width ? 0 : x + 1;\n        // let cellBelow = y + 1 >= this.state.height ? 0 : y + 1;\n        const { top, right, bottom, left } = this.getAdjacentCellCoordinates(\n          x,\n          y\n        );\n        let xOptions = x === right ? [left, x] : [left, x, right];\n        let yOptions = y === bottom ? [top, y] : [top, y, bottom];\n\n        for (let nx of xOptions) {\n          for (let ny of yOptions) {\n            let cellIndex = nx + ny * this.state.width;\n            let populated = populatedCells.includes(cellIndex);\n            if ((nx !== x || ny !== y) && populated) {\n              ++numberOfPopulatedNeighbours;\n            }\n          }\n        }\n\n        const currentCellPopulated = populatedCells.includes(currentCellIndex);\n        if (numberOfPopulatedNeighbours === 3) {\n          newPopulatedCells.push(currentCellIndex);\n        } else if (numberOfPopulatedNeighbours === 2 && currentCellPopulated) {\n          newPopulatedCells.push(currentCellIndex);\n        }\n      }\n    }\n    return newPopulatedCells;\n  }\n\n  componentDidMount() {\n    if (this.state.started) {\n      setTimeout(\n        this.setState({ generation: this.state.generation + 1 }),\n        1000\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.generation !== prevProps.generation) {\n      this.setState({ generation: this.props.generation });\n    }\n    if (this.props.started !== prevProps.started) {\n      this.setState({ started: this.props.started });\n    }\n    if (this.state.started === true && !prevState.started) {\n      setTimeout(() => {\n        this.setState({ generation: this.state.generation + 1 });\n      }, 100);\n    }\n    if (this.state.generation !== prevState.generation) {\n      let populatedCellsToProgress = this.state.populatedCells;\n      for (\n        let gen = prevState.generation + 1;\n        gen <= this.state.generation;\n        gen++\n      ) {\n        populatedCellsToProgress = this.getPopulatedCellsAfter(\n          populatedCellsToProgress\n        );\n        this.setState({ populatedCells: populatedCellsToProgress });\n      }\n      if (this.state.started) {\n        setTimeout(() => {\n          this.setState({ generation: this.state.generation + 1 });\n        }, 100);\n      }\n    }\n  }\n\n  toggleCell(cellIndexValue) {\n    if (this.state.populatedCells.includes(cellIndexValue)) {\n      this.setState({\n        populatedCells: this.state.populatedCells.filter(\n          (value) => value !== cellIndexValue\n        ),\n      });\n    } else {\n      this.setState({\n        populatedCells: [...this.state.populatedCells, cellIndexValue],\n      });\n    }\n  }\n\n  toggleGame() {\n    this.setState({\n      started: !this.state.started,\n    });\n  }\n\n  changeSoundType() {\n    this.currentIndex = (this.currentIndex + 1) % this.soundType.length;\n    this.currentSound = this.soundType[this.currentIndex];\n  }\n\n  render() {\n    const worldSize = this.state.width * this.state.height;\n    let cells = [];\n    for (let i = 0; i < worldSize; i++) {\n      const props = { populated: false, width: this.props.cellWidth };\n      if (this.state.populatedCells.includes(i)) {\n        props.populated = true;\n      }\n      cells.push(\n        <Cell\n          key={\"cell-\" + i}\n          num={i}\n          onClick={(() => {\n            this.toggleCell(i);\n          }).bind(this)}\n          {...props}\n          soundType={this.currentSound}\n        />\n      );\n    }\n\n    const style = {\n      display: \"block\",\n      width: this.state.width * this.props.cellWidth,\n    };\n\n    return (\n      <div>\n        <div className=\"GameOfLife\" style={style}>\n          {cells}\n        </div>\n        <div className=\"ControlPanel\">\n          <button\n            onClick={this.toggleGame.bind(this)}\n            className=\"button-margin\"\n          >\n            {this.state.started ? \"Pause\" : \"Start\"}\n          </button>\n          <button onClick={this.changeSoundType}>Change Sound</button>\n          <div>sound waveform : {this.currentSound}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nGameOfLife.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  generation: PropTypes.number,\n  start: PropTypes.bool,\n  gridBehaviour: PropTypes.bool,\n  border: PropTypes.oneOf([\"hard\", \"marquee\"]),\n  cellWidth: PropTypes.number,\n};\n\nGameOfLife.defaultProps = {\n  generation: 0,\n  start: false,\n  border: \"hard\",\n  cellWidth: 20,\n};\n\nexport default GameOfLife;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GameOfLife from \"./GameOfLife\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// const gliderPopulation = [[1, 0], [2, 1], [0, 2], [1, 2], [2, 2],]\nconst gliderPopulation = [\n  [5, 1],\n  [5, 2],\n  [6, 1],\n  [6, 2],\n  [5, 11],\n  [6, 11],\n  [7, 11],\n  [4, 12],\n  [3, 13],\n  [3, 14],\n  [8, 12],\n  [9, 13],\n  [9, 14],\n  [6, 15],\n  [4, 16],\n  [5, 17],\n  [6, 17],\n  [7, 17],\n  [6, 18],\n  [8, 16],\n  [3, 21],\n  [4, 21],\n  [5, 21],\n  [3, 22],\n  [4, 22],\n  [5, 22],\n  [2, 23],\n  [6, 23],\n  [1, 25],\n  [2, 25],\n  [6, 25],\n  [7, 25],\n  [3, 35],\n  [4, 35],\n  [3, 36],\n  [4, 36],\n];\nReactDOM.render(\n  <GameOfLife\n    width={22}\n    height={22}\n    startingPopulation={gliderPopulation}\n    start={true}\n    border=\"marquee\"\n    cellWidth={10}\n  />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}